#!/usr/bin/env python3
import os.path
import subprocess
import sys
import tempfile
from collections import OrderedDict
from dataclasses import dataclass
from dataclasses import field
from typing import Iterable
from typing import Optional

import apigen

# TODO(iphydf): These are platform-specific. They shouldn't be.
_array_typecode = {
    ("S", 8): "b",
    ("U", 8): "B",
    ("S", 16): "h",
    ("U", 16): "H",
    ("S", 32): "i",
    ("U", 32): "I",
    ("S", 64): "q",
    ("U", 64): "Q",
}


def _order_types_first(decl: apigen.Decl) -> int:
    if isinstance(decl, apigen.Enumeration):
        return 0
    return 100


def _remove_self(in_class: apigen.Name, name: list[str]) -> tuple[str, ...]:
    name = name[len(in_class.ns) + len(in_class.name):]
    if name and name[0] == "self":
        return tuple(name[1:])
    else:
        return tuple(name)


def _get_typename(ty: apigen.Type) -> apigen.Name:
    if isinstance(ty, apigen.PointerType):
        return ty.type
    raise Exception(f"unhandled type: {ty}")


def _is_error_ptr(param: apigen.Var) -> bool:
    if not (isinstance(param.type, apigen.PointerType)
            and param.type.type.name):
        return False
    return param.type.type.name[0] == "Err"


def _is_void_ptr(param: apigen.Var) -> bool:
    return (isinstance(param.type, apigen.BuiltinType)
            and param.type.type is apigen.VoidPtr)


def _relocate_err(ns: tuple[str, ...], name: tuple[str,
                                                   ...]) -> tuple[str, ...]:
    if ns and name and name[0].lower() == "err":
        return (ns[0], name[0]) + ns[1:] + name[1:]
    return ns + name


def _relocate_callback(ns: tuple[str, ...],
                       name: tuple[str, ...]) -> tuple[str, ...]:
    if ns and name and name[0].lower() == "callback":
        return (ns[0], name[0]) + ns[1:] + name[1:]
    return ns + name


def _camel(ns: tuple[str, ...], name: list[str]) -> str:
    return "_".join(n.capitalize() for n in _relocate_err(ns, tuple(name)))


def _snake(ns: tuple[str, ...], name: list[str]) -> str:
    return "_".join(n.lower() for n in _relocate_err(ns, tuple(name)))


def _scream(ns: tuple[str, ...], name: list[str]) -> str:
    return "_".join(n.upper() for n in _relocate_err(ns, tuple(name)))


@dataclass
class CythonDeclarations:
    prelude: list[str] = field(default_factory=list)
    enums: list[str] = field(default_factory=list)
    typedefs: list[str] = field(default_factory=list)
    callbacks: list[str] = field(default_factory=list)
    funcs: list[str] = field(default_factory=list)
    classes: list[str] = field(default_factory=list)

    def finalize(self) -> list[str]:
        return (self.prelude + self.enums + self.typedefs + self.callbacks +
                self.funcs + self.classes)


@dataclass
class CythonClass:
    body: list[str] = field(default_factory=list)
    callbacks: list[str] = field(default_factory=list)
    init: list[str] = field(default_factory=list)

    def finalize(self) -> list[str]:
        if self.callbacks:
            self.init.append(f"        install_handlers(self, self._ptr)")

        return [*self.body, *self.callbacks, *self.init]


@dataclass
class CythonImplementation:
    prelude: list[str] = field(default_factory=list)
    classes: OrderedDict[str, CythonClass] = field(default_factory=OrderedDict)
    handlers: list[str] = field(default_factory=list)
    install_handlers: list[str] = field(default_factory=list)

    def finalize(self) -> list[str]:
        return [
            *self.prelude,
            *self.handlers,
            *self.install_handlers,
            *(l for cls in self.classes.values() for l in cls.finalize()),
        ]


@dataclass
class GenCython:
    ns: tuple[str, ...] = tuple()
    pxd: CythonDeclarations = field(default_factory=CythonDeclarations)
    pyx: CythonImplementation = field(default_factory=CythonImplementation)
    in_class: Optional[apigen.Name] = None
    in_class_name: str = ""
    enum_types: list[str] = field(default_factory=list)

    @property
    def current_class(self) -> CythonClass:
        if not self.in_class_name:
            raise Exception("not in class")
        if not self.in_class_name in self.pyx.classes:
            raise Exception(f"class {self.in_class_name} not initialised")
        return self.pyx.classes[self.in_class_name]

    def _add(self, lines: list[str], *added: str) -> None:
        lines.extend(added)

    def make_typename(self, name: apigen.Name) -> str:
        if name.ns[0] != self.ns[0]:
            prefix = f"{name.ns[0]}."
        else:
            prefix = ""
        return prefix + _camel(tuple(name.ns), name.name)

    def make_identifier(self, name: apigen.Name) -> str:
        id = _snake(tuple(name.ns), name.name)
        if id in ["type", "def"]:
            return id + "_"
        else:
            return id

    def make_this(self, const: bool) -> str:
        if not self.in_class:
            raise Exception("not in class")
        return f"{'const ' if const else ''}{self.make_typename(self.in_class)}* self"

    def make_type(self, ty: apigen.Decl) -> str:
        if isinstance(ty, apigen.BuiltinType):
            return self.make_ctype(ty.type)
        if isinstance(ty, apigen.Typename):
            return self.make_typename(ty.name)
        if isinstance(ty, apigen.CallbackType):
            return f"{self.make_identifier(ty.type)}*"
        if isinstance(ty, apigen.SizedArrayType):
            return f"{self.make_type(ty.type)}*"
        if isinstance(ty, apigen.PointerType):
            return f"{self.make_typename(ty.type)}*"
        if isinstance(ty, apigen.ConstPointerType):
            return f"const {self.make_typename(ty.type)}*"
        if isinstance(ty, apigen.ArrayType):
            return f"{self.make_ctype(ty.type)}*"
        if isinstance(ty, apigen.ConstArrayType):
            return f"const {self.make_ctype(ty.type)}*"
        if isinstance(ty, apigen.ConstType):
            return f"const {self.make_type(ty.type)}"
        raise Exception(f"unhandled type: {ty}")

    def make_ctype(self, ty: apigen.CType) -> str:
        if ty is apigen.Void:
            return "void"
        if ty is apigen.VoidPtr:
            return "void*"
        if ty is apigen.Bool:
            return "bool"
        if ty is apigen.SizeT:
            return "size_t"
        if ty is apigen.String:
            return "const char*"
        if isinstance(ty, apigen.SInt):
            return f"int{ty.bitSize}_t"
        if isinstance(ty, apigen.UInt):
            return f"uint{ty.bitSize}_t"
        raise Exception(f"unhandled type: {ty}")

    def make_param(self, param: apigen.Var) -> str:
        if (isinstance(param.type, apigen.SizedArrayType)
                and isinstance(param.type.size, apigen.Ref)
                and not param.type.size.name.ns):
            return f"{self.make_type(param.type.type)}* {self.make_identifier(param.name)}, size_t {self.make_identifier(param.type.size.name)}"
        else:
            return f"{self.make_type(param.type)} {self.make_identifier(param.name)}"

    def make_params(self, params: list[apigen.Var]) -> list[str]:
        return [self.make_param(param) for param in params]

    def make_cdef_param(self, param: apigen.Var) -> tuple[str, str]:
        name = self.make_identifier(param.name)
        return (name, f"{self.make_cdef_type(param.type)} {name}")

    def make_cdef_params(self,
                         params: list[apigen.Var]) -> list[tuple[str, str]]:
        return [
            self.make_cdef_param(param) for param in params
            if not _is_error_ptr(param)
        ]

    def make_cdef_type(self, ty: apigen.Decl) -> str:
        if isinstance(ty, apigen.BuiltinType):
            return self.make_cdef_ctype(ty.type)
        if isinstance(ty, apigen.Typename):
            return self.make_typename(ty.name)
        if isinstance(ty, apigen.SizedArrayType):
            return self.make_cdef_array_type(ty.type)
        if isinstance(ty, apigen.PointerType):
            return f"{self.make_typename(ty.type)}_Ptr"
        if isinstance(ty, apigen.ConstPointerType):
            return f"{self.make_typename(ty.type)}_Ptr"
        if isinstance(ty, apigen.ArrayType):
            return self.make_cdef_array_ctype(ty.type)
        if isinstance(ty, apigen.ConstArrayType):
            return self.make_cdef_array_ctype(ty.type)
        if isinstance(ty, apigen.ConstType):
            return self.make_cdef_type(ty.type)
        raise Exception(f"unhandled type: {ty}")

    def make_cdef_array_type(self, ty: apigen.Decl) -> str:
        if isinstance(ty, apigen.BuiltinType):
            return self.make_cdef_array_ctype(ty.type)
        if isinstance(ty, apigen.ConstType):
            return self.make_cdef_array_type(ty.type)
        raise Exception(f"unhandled type: {ty}")

    def make_cdef_array_ctype(self, ty: apigen.CType) -> str:
        if isinstance(ty, apigen.UInt) and ty.bitSize == 8:
            return f"bytes"
        raise Exception(f"unhandled type: {ty}")

    def make_cdef_ctype(self, ty: apigen.CType) -> str:
        if ty is apigen.Void:
            return "None"
        if ty is apigen.Bool:
            return "bool"
        if ty is apigen.SizeT:
            return "int"
        if ty is apigen.String:
            return "str"
        if isinstance(ty, apigen.SInt):
            return f"int"
        if isinstance(ty, apigen.UInt):
            return f"int"
        raise Exception(f"unhandled type: {ty}")

    def make_handler_param(self,
                           param: apigen.Var) -> Optional[tuple[str, str]]:
        ty = self.make_handler_type(param.type)
        name = self.make_identifier(param.name)
        return (name, f"{name}: {ty}") if ty else None

    def make_handler_params(self,
                            params: list[apigen.Var]) -> list[tuple[str, str]]:
        # skip "tox" or "toxav"
        return [
            p for p in (self.make_handler_param(param) for param in params[1:])
            if p
        ]

    def make_handler_type(self, ty: apigen.Type) -> Optional[str]:
        if isinstance(ty, apigen.BuiltinType):
            return self.make_handler_ctype(ty.type)
        if isinstance(ty, apigen.Typename):
            return self.make_typename(ty.name)
        if isinstance(ty, apigen.SizedArrayType):
            return self.make_handler_array_type(ty.type)
        # if isinstance(ty, apigen.PointerType):
        #     return f"{self.make_typename(ty.type)}_Ptr"
        # if isinstance(ty, apigen.ConstPointerType):
        #     return f"{self.make_typename(ty.type)}_Ptr"
        # if isinstance(ty, apigen.ArrayType):
        #     return self.make_handler_array_ctype(ty.type)
        # if isinstance(ty, apigen.ConstArrayType):
        #     return self.make_handler_array_ctype(ty.type, ty.size, name)
        # if isinstance(ty, apigen.ConstType):
        #     return self.make_handler_type(ty.type)
        raise Exception(f"unhandled type: {ty}")

    def make_handler_array_type(self, ty: apigen.Type) -> str:
        if not isinstance(ty, apigen.ConstType):
            raise Exception(f"non-const array type in callback handler: {ty}")
        ty = ty.type
        if not isinstance(ty, apigen.BuiltinType):
            raise Exception(
                f"array of non-builtin type in callback handler: {ty}")
        return self.make_handler_array_ctype(ty.type)

    def make_handler_array_ctype(self, ty: apigen.CType) -> str:
        if isinstance(ty, apigen.UInt) and ty.bitSize == 8:
            return f"bytes"
        if isinstance(ty, apigen.SInt):
            return f"array"
        if isinstance(ty, apigen.UInt):
            return f"array"
        raise Exception(f"unhandled type: {ty}")

    def make_handler_ctype(self, ty: apigen.CType) -> Optional[str]:
        if ty is apigen.VoidPtr:
            return None
        if ty is apigen.Bool:
            return "bool"
        if ty is apigen.SizeT:
            return "int"
        if ty is apigen.String:
            return f"str"
        if isinstance(ty, apigen.SInt):
            return "int"
        if isinstance(ty, apigen.UInt):
            return "int"
        raise Exception(f"unhandled type: {ty}")

    def make_handler_args(self, params: list[apigen.Var]) -> list[str]:
        return [
            p for p in (self.make_handler_arg(param) for param in params) if p
        ]

    def make_handler_arg(self, param: apigen.Var) -> Optional[str]:
        return self.make_handler_type_conversion(
            param.type, self.make_identifier(param.name))

    def make_handler_type_conversion(self, ty: apigen.Type,
                                     id: str) -> Optional[str]:
        if isinstance(ty, apigen.BuiltinType):
            return self.make_handler_ctype_conversion(ty.type, id)
        if isinstance(ty, apigen.Typename):
            ty_name = self.make_typename(ty.name)
            if ty_name in self.enum_types:
                return f"{ty_name}({id})"
            else:
                return id
        if isinstance(ty, apigen.SizedArrayType):
            return self.make_handler_array_type_conversion(
                ty.type, ty.size, id)
        if isinstance(ty, apigen.PointerType) or isinstance(
                ty, apigen.ConstPointerType):
            if ty.type.name and ty.type.name[0] == "Err":
                return "&" + id
            else:
                return f"{id}._get() if {id} else NULL"
        # if isinstance(ty, apigen.ConstPointerType):
        #     return f"{self.make_typename(ty.type)}_Ptr"
        # if isinstance(ty, apigen.ArrayType):
        #     return self.make_handler_array_ctype(ty.type)
        # if isinstance(ty, apigen.ConstArrayType):
        #     return self.make_handler_array_ctype(ty.type, ty.size, name)
        # if isinstance(ty, apigen.ConstType):
        #     return self.make_handler_type_conversion(ty.type)
        raise Exception(f"unhandled type: {ty} for {id}")

    def make_handler_array_type_conversion(self, ty: apigen.Type,
                                           size: apigen.Decl, id: str) -> str:
        if not isinstance(ty, apigen.ConstType):
            raise Exception(f"non-const array type in callback handler: {ty}")
        ty = ty.type
        if not isinstance(ty, apigen.BuiltinType):
            raise Exception(
                f"array of non-builtin type in callback handler: {ty}")
        return self.make_handler_array_ctype_conversion(ty.type, size, id)

    def make_handler_array_ctype_conversion(self, ty: apigen.CType,
                                            size: apigen.Decl, id: str) -> str:
        sizer = self.make_handler_sizer(size)
        if isinstance(ty, apigen.UInt) and ty.bitSize == 8:
            return f"{id}[:{sizer}]"
        if isinstance(ty, apigen.SInt):
            return f"array(\"{_array_typecode[('S', ty.bitSize)]}\", [x for x in {id}[:{sizer}]])"
        if isinstance(ty, apigen.UInt):
            return f"array(\"{_array_typecode[('U', ty.bitSize)]}\", [x for x in {id}[:{sizer}]])"
        raise Exception(f"unhandled type: {ty}")

    def make_handler_sizer(self, size: apigen.Decl) -> str:
        if isinstance(size, apigen.Mul):
            return f"{self.make_handler_sizer(size.left)} * {self.make_handler_sizer(size.right)}"
        if isinstance(size, apigen.Div):
            return f"{self.make_handler_sizer(size.left)} / {self.make_handler_sizer(size.right)}"
        if isinstance(size, apigen.Add):
            return f"{self.make_handler_sizer(size.left)} + {self.make_handler_sizer(size.right)}"
        if isinstance(size, apigen.Sub):
            return f"{self.make_handler_sizer(size.left)} - {self.make_handler_sizer(size.right)}"
        if isinstance(size, apigen.Max):
            return f"max({self.make_handler_sizer(size.arg1)}, {self.make_handler_sizer(size.arg2)})"
        if isinstance(size, apigen.Abs):
            return f"abs({self.make_handler_sizer(size.expr)})"
        if isinstance(size, apigen.Paren):
            return f"({self.make_handler_sizer(size.expr)})"
        if isinstance(size, apigen.Ref):
            id = self.make_identifier(size.name)
            if size.name.ns:
                return id + "()"  # this is a size constant function
            else:
                return id
        if isinstance(size, apigen.IntVal):
            return f"{size.val.name[0]}"
        raise Exception(f"unhandled type: {size}")

    def make_handler_ctype_conversion(self, ty: apigen.CType,
                                      c_name: str) -> Optional[str]:
        if ty is apigen.VoidPtr:
            return None
        if ty is apigen.Bool:
            return c_name
        if ty is apigen.SizeT:
            return c_name
        if ty is apigen.String:
            return f'{c_name}.decode("utf-8")'
        if isinstance(ty, apigen.SInt):
            return c_name
        if isinstance(ty, apigen.UInt):
            return c_name
        raise Exception(f"unhandled type: {ty}")

    def make_ccall_args(self, params: list[apigen.Var]) -> list[str]:
        return [
            p for p in (self.make_ccall_arg(param) for param in params) if p
        ]

    def make_ccall_arg(self, param: apigen.Var) -> Optional[str]:
        return self.make_ccall_type_conversion(param.type, param.name)

    def make_ccall_type_conversion(self, ty: apigen.Type,
                                   name: apigen.Name) -> Optional[str]:
        id = self.make_identifier(name)
        if isinstance(ty, apigen.BuiltinType):
            return self.make_ccall_ctype_conversion(ty.type, name)
        if isinstance(ty, apigen.Typename):
            ty_name = self.make_typename(ty.name)
            if ty_name in self.enum_types:
                return f"{ty_name}({id})"
            else:
                return id
        if isinstance(ty, apigen.SizedArrayType):
            return self.make_ccall_array_type_conversion(
                ty.type, ty.size, name)
        if isinstance(ty, apigen.PointerType) or isinstance(
                ty, apigen.ConstPointerType):
            if ty.type.name and ty.type.name[0] == "Err":
                return "&" + id
            else:
                return f"{id}._get() if {id} else NULL"
        # if isinstance(ty, apigen.ArrayType):
        #     return self.make_ccall_array_ctype(ty.type)
        # if isinstance(ty, apigen.ConstArrayType):
        #     return self.make_ccall_array_ctype(ty.type, ty.size, name)
        # if isinstance(ty, apigen.ConstType):
        #     return self.make_ccall_type_conversion(ty.type)
        raise Exception(f"unhandled type: {ty} for {name}")

    def make_ccall_array_type_conversion(self, ty: apigen.Type,
                                         size: apigen.Decl,
                                         name: apigen.Name) -> str:
        if not isinstance(ty, apigen.ConstType):
            raise Exception(f"non-const array type in callback handler: {ty}")
        ty = ty.type
        if not isinstance(ty, apigen.BuiltinType):
            raise Exception(
                f"array of non-builtin type in callback handler: {ty}")
        return self.make_ccall_array_ctype_conversion(ty.type, size, name)

    def make_ccall_array_ctype_conversion(self, ty: apigen.CType,
                                          size: apigen.Decl,
                                          name: apigen.Name) -> str:
        sizer = self.make_ccall_sizer(size, name)
        if isinstance(ty, apigen.UInt) and ty.bitSize == 8:
            return sizer
        raise Exception(f"unhandled type: {ty}")

    def make_ccall_sizer(self, size: apigen.Decl, name: apigen.Name) -> str:
        id = self.make_identifier(name)
        if isinstance(size, apigen.Ref):
            if size.name.ns:
                sizer = self.make_identifier(size.name)
                return f'common.check_len("{id}", {id}, {sizer}())'
            else:
                return f"{id}, len({id})"
        raise Exception(f"unhandled type: {size}")

    def make_ccall_ctype_conversion(self, ty: apigen.CType,
                                    name: apigen.Name) -> Optional[str]:
        if ty is apigen.Bool:
            return self.make_identifier(name)
        if ty is apigen.SizeT:
            return self.make_identifier(name)
        if ty is apigen.String:
            return f'{self.make_identifier(name)}.encode("utf-8")'
        if isinstance(ty, apigen.SInt):
            return self.make_identifier(name)
        if isinstance(ty, apigen.UInt):
            return self.make_identifier(name)
        raise Exception(f"unhandled type: {ty}")

    def genModel(self, model: apigen.Model) -> dict[str, str]:
        if len(model.modules) == 1:
            basedir = os.path.dirname(model.modules[0].path)
        else:
            basedir = os.path.commonprefix(tuple(
                m.path for m in model.modules)).rpartition("/")[0]

        mods = {}
        for module in model.modules:
            self.pxd = CythonDeclarations(prelude=[
                "# cython: language_level=3, linetrace=True",
                "from libcpp cimport bool",
                "from libc.stdint cimport uint8_t, uint16_t, uint32_t, uint64_t, int16_t, int32_t, int64_t",
                "from libc.stdlib cimport malloc, free",
                "from typing import Optional",
                "",
            ])
            self.pyx = CythonImplementation(prelude=[
                "# cython: language_level=3, linetrace=True",
                "from array import array",
                "from pytox import common",
                "from types import TracebackType",
                "from typing import Optional",
                "from typing import TypeVar",
                "",
                'T = TypeVar("T")',
                "",
                "class ApiException(common.ApiException):",
                "    pass",
                "",
            ])
            basename = os.path.splitext(module.path[len(basedir) + 1:])[0]
            if basename == "toxav/toxav":
                self.pxd.prelude.append("cimport pytox.toxcore.tox as tox")
            self.genModule(module)
            mods[basename + ".pxd"] = "\n".join(self.pxd.finalize()) + "\n"
            mods[basename + ".gen.pyx"] = "\n".join(self.pyx.finalize()) + "\n"
        return mods

    def genModule(self, module: apigen.Module) -> None:
        header = os.path.join("tox", os.path.basename(module.path))
        self._add(self.pxd.prelude, f'cdef extern from "{header}":')
        for decl in module.decls:
            self.genDecl(decl)

    def genNamespace(self, decl: apigen.Namespace) -> None:
        ns = self.ns
        self.ns += tuple(decl.name)
        for mem in sorted(decl.mems, key=_order_types_first):
            self.genDecl(mem)
        self.ns = ns

    def genEnumeration(self, decl: apigen.Enumeration) -> None:
        ty_name = self.make_typename(decl.name)
        self.enum_types.append(ty_name)
        self._add(self.pxd.enums, f"    cpdef enum {ty_name}:")
        ns = self.ns
        if decl.name.name[0] == "Err":
            self.ns = (tuple([self.ns[0], decl.name.name[0]]) +
                       tuple(self.ns[1:]) + tuple(decl.name.name[1:]))
        else:
            self.ns = tuple(self.ns) + tuple(decl.name.name)
        for mem in decl.mems:
            self.genEnumMember(mem)
        self.ns = ns

    def genEnumMember(self, decl: apigen.EnumMember) -> None:
        self._add(self.pxd.enums,
                  f"        {_scream(self.ns, decl.name.name)}")

    def genClassDecl(self, decl: apigen.ClassDecl) -> None:
        if decl.name.name == ["System"]:
            return  # skip for now

        cls = self.make_typename(decl.name)

        self.in_class = decl.name
        self.in_class_name = cls

        self._add(self.pxd.typedefs, *(f"    ctypedef struct {cls}", ))
        self._add(
            self.pxd.classes,
            "",
            "",
            f"cdef class {cls}_Ptr:",
            f"    cdef {cls}* _ptr",
            f"    cdef {cls}* _get(self) except *",
        )
        self.pyx.classes[self.in_class_name] = CythonClass(body=[
            "",
            "",
            f"cdef class {cls}_Ptr:",
            f"    cdef {cls}* _get(self) except *:",
            f"        if self._ptr is NULL:",
            f"            raise common.UseAfterFreeException()",
            f"        return self._ptr",
            "",
            f"    def __del__(self) -> None:",
            f"        self.__exit__(None, None, None)",
            "",
            f"    def __enter__(self: T) -> T:",
            f"        return self",
        ])

        ns = self.ns
        self.ns += tuple(decl.name.name)
        for mem in sorted(decl.mems, key=_order_types_first):
            self.genDecl(mem)
        self.ns = ns
        self.in_class = None

    def genProperty(self, decl: apigen.Property) -> None:
        if isinstance(decl.prop, apigen.ValueProp):
            self.genValueProp(decl.prop, decl.name)
        elif isinstance(decl.prop, apigen.ArrayProp):
            self.genArrayProp(decl.prop, decl.name)

    def genValueProp(self, decl: apigen.ValueProp, name: apigen.Name) -> None:
        if not self.in_class:
            raise Exception("method not in a class")

        if decl.get:
            self.genMethod(decl.get)
        if decl.set:
            self.genMethod(decl.set)

        if decl.get and decl.get.params or decl.set and len(
                decl.set.params) != 1:
            return  # not supported yet

        prop_type = self.make_cdef_type(decl.type)
        prop_name = _snake(_remove_self(self.in_class, name.ns), name.name)
        prop_expr = self.make_ccall_type_conversion(
            decl.type, apigen.Name(name.kind, [], [prop_name]))

        self._add(
            self.current_class.body,
            "",
            f"    @property",
            f"    def {prop_name}(self) -> {prop_type}:",
        )
        if decl.get:
            retval = self.make_handler_type_conversion(
                decl.type,
                f"{self.make_identifier(decl.get.name)}(self._get())")
            self._add(
                self.current_class.body,
                f"        return {retval}",
            )
        else:
            self._add(
                self.current_class.body,
                f'        raise AttributeError("{prop_name} is write-only")',
            )
        if decl.set:
            self._add(
                self.current_class.body,
                "",
                f"    @{prop_name}.setter",
                f"    def {prop_name}(self, {prop_name}: {prop_type}):",
                f"        {self.make_identifier(decl.set.name)}(self._get(), {prop_expr})",
            )

    def genArrayProp(self, decl: apigen.ArrayProp, name: apigen.Name) -> None:
        if decl.get:
            self.genMethod(decl.get)
        if decl.set:
            self.genMethod(decl.set)
        if decl.size:
            self.genMethod(decl.size)

    def genMethod(self, decl: apigen.Method) -> None:
        if not self.in_class:
            raise Exception("method not in a class")

        is_callback = decl.name.name[0] == "callback"
        c_name = "_".join(
            _relocate_callback(tuple(decl.name.ns), tuple(decl.name.name)))
        if any(map(_is_void_ptr, decl.params)) and not is_callback:
            noexcept = " except *"
        else:
            noexcept = ""
        self._add(
            self.pxd.funcs,
            f"    cdef {self.make_type(decl.ret)} {c_name}({', '.join([self.make_this(decl.const), *self.make_params(decl.params)])}){noexcept}",
        )

        if is_callback:
            self.genCallbackMethod(decl, c_name)

    def genCallbackMethod(self, decl: apigen.Method, c_name: str) -> None:
        if not self.in_class:
            raise Exception("method not in a class")

        if not self.pyx.install_handlers:
            self.pyx.install_handlers = [
                "",
                f"    void install_handlers({self.make_typename(self.in_class)}_Ptr self, {self.make_typename(self.in_class)}* ptr):",
            ]
        handler = _snake(("handle", ) + tuple(decl.name.ns[1:]),
                         decl.name.name[1:])
        last_type = decl.params[-1].type
        if (isinstance(last_type, apigen.BuiltinType)
                and last_type.type is apigen.VoidPtr):
            maybe_self = ", <void*>self"
        else:
            maybe_self = ""
        self._add(
            self.pyx.install_handlers,
            f"        {c_name}(ptr, {handler}{maybe_self})",
        )

    def genConstructor(self, decl: apigen.Constructor) -> None:
        if not self.in_class:
            raise Exception("not in class")
        class_ty = self.make_typename(self.in_class)
        c_name = self.make_identifier(decl.name)
        self._add(
            self.pxd.funcs,
            f"    cdef {class_ty}* {c_name}({', '.join(self.make_params(decl.params))})",
        )

        name = "_".join(decl.name.name)

        cdef_params = self.make_cdef_params(decl.params)
        params = ", ".join(["self", *(p[1] for p in cdef_params)])
        self._add(
            self.pxd.classes,
            f"    cdef {class_ty}* _{name}({params})",
        )

        error_params = tuple(p for p in decl.params if _is_error_ptr(p))
        if len(error_params) != 1:
            raise Exception(
                f"constructor `{name}` has no (or multiple) error parameters: ({error_params})"
            )
        error_param = error_params[0]

        error_ty = self.make_typename(_get_typename(error_param.type))
        error_name = self.make_identifier(error_param.name)
        ok = error_ty.upper() + "_OK"
        self._add(
            self.current_class.body,
            "",
            f"    cdef {class_ty}* _{name}({params}):",
            f"        cdef {error_ty} {error_name} = {ok}",
            f"        cdef {class_ty}* ptr = {c_name}({', '.join(self.make_ccall_args(decl.params))})",
            f"        if {error_name}:",
            f"            raise ApiException({error_ty}({error_name}))",
            f"        return ptr",
        )

        self._add(
            self.current_class.init,
            "",
            f"    def __init__({params}):",
            f'        """Create new {class_ty} object."""',
            f"        self._ptr = self._{name}({', '.join(p[0] for p in cdef_params)})",
        )

    def genDestructor(self, decl: apigen.Destructor) -> None:
        if not self.in_class:
            raise Exception("not in class")
        id = self.make_identifier(decl.name)
        self._add(
            self.pxd.funcs,
            f"    cdef void {id}({', '.join([self.make_typename(self.in_class) + '* ' + self.make_identifier(self.in_class)] + self.make_params(decl.params))})",
        )
        self._add(
            self.current_class.body,
            "",
            f"    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: TracebackType | None) -> None:",
            # not _get() because we can free as often as we want
            f"        {id}(self._ptr)",
            f"        self._ptr = NULL",
        )

    def genFunction(self, decl: apigen.Function) -> None:
        self._add(
            self.pxd.funcs,
            f"    cdef {self.make_type(decl.ret)} {self.make_identifier(decl.name)}({', '.join(self.make_params(decl.params))})",
        )

    def genDefine(self, decl: apigen.Define) -> None:
        pass  # skip

    def genCallbackTypeDecl(self, decl: apigen.CallbackTypeDecl) -> None:
        if not self.in_class:
            raise Exception("not in class")
        handler_type = self.make_identifier(decl.name)
        self._add(
            self.pxd.callbacks,
            f"    ctypedef void {handler_type}({', '.join(self.make_params(decl.params))}) except *",
        )
        if decl.name.name[0] == "log":
            return  # TODO(iphydf): handle log
        handler = _snake(("handle", ) + tuple(decl.name.ns[1:]),
                         decl.name.name[:-1])
        if not self.pyx.handlers:
            self.pyx.handlers = ["", "cdef:"]
        params = self.make_handler_params(decl.params)
        py_params = ", ".join(p[1] for p in params)
        self._add(
            self.pyx.handlers,
            f"    void py_{handler}(self: {self.make_typename(self.in_class)}_Ptr, {py_params}) except *:",
            f"        self.{handler}({', '.join(p[0] for p in params)})",
            f"    void {handler}({', '.join(self.make_params(decl.params))}) except *:",
            f"        py_{handler}(<{self.make_typename(self.in_class)}_Ptr> user_data, {', '.join(self.make_handler_args(decl.params)[1:])})",
        )
        if not self.current_class.callbacks:
            self.current_class.callbacks = [""]
        self._add(
            self.current_class.callbacks,
            f"    def {handler}(self, {py_params}) -> None: pass",
        )

    def genIdTypeDecl(self, decl: apigen.IdTypeDecl) -> None:
        self._add(self.pxd.typedefs,
                  f"    ctypedef uint32_t {self.make_typename(decl.name)}")

    def genDecl(self, decl: apigen.Decl) -> None:
        if isinstance(decl, apigen.Namespace):
            self.genNamespace(decl)
        elif isinstance(decl, apigen.ClassDecl):
            self.genClassDecl(decl)
        elif isinstance(decl, apigen.Property):
            self.genProperty(decl)
        elif isinstance(decl, apigen.Method):
            self.genMethod(decl)
        elif isinstance(decl, apigen.Enumeration):
            self.genEnumeration(decl)
        elif isinstance(decl, apigen.Constructor):
            self.genConstructor(decl)
        elif isinstance(decl, apigen.Destructor):
            self.genDestructor(decl)
        elif isinstance(decl, apigen.Define):
            self.genDefine(decl)
        elif isinstance(decl, apigen.Function):
            self.genFunction(decl)
        elif isinstance(decl, apigen.CallbackTypeDecl):
            self.genCallbackTypeDecl(decl)
        elif isinstance(decl, apigen.IdTypeDecl):
            self.genIdTypeDecl(decl)
        else:
            raise Exception(f"unhandled type: {decl.__class__}")


def main() -> None:
    args = sys.argv[1:]
    if args[0] == "--typecheck":
        mypy = True
        args.pop(0)
    else:
        mypy = False
    out = args[0]
    srcs = [os.path.realpath(arg) for arg in args[1:]]

    own_dir = os.path.dirname(os.path.realpath(__file__))
    workspace = os.path.dirname(os.path.dirname(own_dir))
    if os.path.exists(os.path.join(workspace, "bazel-bin")):
        model_code = subprocess.run(
            ["bazel", "run", "//hs-apigen/tools:dump-model", "--", "-py", "-"]
            + srcs,
            stdout=subprocess.PIPE,
            check=True,
        ).stdout.decode("utf-8")
    else:
        print("bazel is required")
        sys.exit(1)

    if mypy:
        # This takes about 3 minutes, so we don't do it often. It's just to
        # check whether the apigen output matches the data model we put in
        # apigen.py.
        with tempfile.NamedTemporaryFile(suffix=".py") as tmp:
            tmp.write(b"import apigen\n")
            tmp.write(model_code.encode("utf-8"))
            subprocess.run(
                [
                    "bazel", "run", "@mypy//:bin/mypy", "--", "--strict",
                    tmp.name
                ],
                env={
                    "MYPYPATH": own_dir,
                    **os.environ
                },
                check=True,
            )

    model: apigen.Model = eval(model_code)
    for file, content in GenCython().genModel(model).items():
        with open(os.path.join(out, file), "w") as fh:
            fh.write(content)


if __name__ == "__main__":
    main()
